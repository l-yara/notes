#-*- mode: org -*-
#+STARTUP: showall
** Explanation - in ru:
https://habrahabr.ru/post/174467/

** Logs:
git log --oneline --decorate
# convenient for checking before merge:
git log -5
# compact:
git log --oneline -5

** Safe update (see http://stackoverflow.com/questions/6406762/why-am-i-merging-remote-tracking-branch-origin-develop-into-develop for discussion):
git remote update -p;git merge --ff-only @{u}
# if the above fails with a complaint that the local branch has diverged:
git rebase -p @{u}

** Store current work (stash):
git stash
*** Control over already existing:
git stash list
git stash pop
-- or, as a variant:
git stash apply [-- index]
-- if needed:
git stash clear

** Branch operation:
*** Show with the last commits:
git branch -av

*** List branches merged in current:
# CAUTION! This includes `master`!
git branch --merged

*** Branches mass murder:
git branch --merged >/tmp/merged-branches && vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches

*** Delete branch WN on client and remote:
git branch -d WN
git push origin --delete WN

*** Switch to branch:
git checkout WN

*** Take the branch from server where it lives in remotes/origin/WN:
git checkout -b WN remotes/origin/WN

*** Move pointer on the commit a12b34c56 (on master branch):
git reset --hard a12b34c56
# and push on remote
git push --force origin master

*** Move pointer on the commit a12b34c56 (on WN branch):
git checkout WN
git reset --hard a12b34c56
# and push on remote
git push --force origin WN

** Revert all changes: (notice branch reference format):
git reset --hard origin/master

** Reveret the last commit
git revert HEAD

** Applying commits from another branch to my current (WN):
*** switch to branch:
git checkout WN
*** apply commit
git cherry-pick a12b34c56
*** or, for range apply:
git cherry-pick a12b34c56^..d12e23f67
*** merge a set of commits into one, starting from a1b2c3d4:
git rebase -i a1b2c3d4
*** amend the commit message:
git commit --amend -m "...new message..."

** Before push - squash commits into less amount of:
git rebase -i origin/master
(will be 2 edits: picking commits first, editing message second)

** Get me outta here:
git revert HEAD;git commit -m "revert";git push origin WN

** Nice .gitconfig:
#+BEGIN_SRC
[branch]
	autosetuprebase = always
[user]

	email = yaroslav.lyakh@<company>.com

	name = Yaroslav Lyakh

[alias]
        up = "!git remote update -p; git merge --ff-only @{u}"
	co = checkout
	lg = log --oneline --graph --all --decorate
	last = log -1 HEAD
	ignore = update-index --assume-unchanged
	unignore = update-index --no-assume-unchanged
[core]
	excludesfile = ~/.gitignore
	autocrlf = input
[http]
	proxy = http://outboundproxy.<company>.net:8083
[https]
	proxy = http://outboundproxy.<company>.net:8083
#+END_SRC
** Stop tracking file (to respect a .gitignored):
git update-index --assume-unchanged 《file 》

** Merge other (master) branch into mine:
git checkout mine # to "mine" branch
git fetch origin # gets me up to date
git merge origin/master

** If we have a centralized certification problem:
GIT_SSL_NO_VERIFY=true git clone https://gitlab.com/mwasilewski/undo-tree

** Ignoring tracked files:
in .gitconfig:

[alias]
ignore = update-index --assume-unchanged
unignore = update-index --no-assume-unchanged
(see http://stackoverflow.com/questions/5011390/git-ignoring-a-file-which-is-version-controlled for details)
